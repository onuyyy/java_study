package com.sist.main;
/*
 * 
 * 자바 클래스의 구성 => 객체지향 특성	(접근지정어, 캡슐화, 재사용법, 수정, 추가)
 *								접근지정어 : public, protected, default, private
 *										 1) 변수 2) 메소드 3) 생성자
 *								캡슐화	: 데이터 보호 => 모든 변수는 private
 *								재사용	: 변경해서 사용(상속 is-a), 있는 그대로 사용(포함( has-a)
 *								수정		: 오버라이딩
 *								추가		: 오버로딩
 * class ClasName {
 * 		
 * 		변수 선언 가능
 * 			1) 멤버변수 (인스턴스변수 => new를 이용하여 새로운 메모리를 할당할 때 따로 저장되는 변수)
 * 				- 형식) [접근지정어] 데이터형 변수명 = 값 (값 설정 안 하면 default 값)
 * 						int a;		// default = 0 값
 * 						int a = 10;	// 명시적 초기화
 * 						
 * 						int a;
 * 						a = 10;		// 클래스 내에선 이렇게 구현이 불가능, 위의 형식처럼 선언만 가능
 * 										=> 변수의 초기화 (생성자)
 *						생성시점 : new를 이용해서 메모리 공간이 확보
 *						소멸시점 : 객체=null이거나 사용하지 않는 경우		=> 가비지 컬렉션이 소멸시킨다 (메모리 회수)	"GC"
 *						가장 많이 사용되는 변수 (여러 개를 저장)
 *						사용 방법
 *							class a {
 *								int age;		// 0
 *								String name;	// null
 *							}
 *								A a = new A();	// age와 name이 a에 복사 됨		=>> 사용할 때 a.age / a. name 으로 호출
 *								  -- 객체 또는 인스턴스라고 부른다
 *											 ------ 메모리에 저장된 상태를 인스턴스
 *								A b = new A(); 
 *								==> class는 한 개만 설계하고 new를 이용하여 여러 메모리 공간을 만들어 저장한다
 *								==> 인스턴스는 본인 주소에 있는 변수에만 접근이 가능하다
 *						
 *								b = a; 		>> 저장된 데이터 관리 위치가 변경이 될 수 있다 / b의 원래 데이터는 GC가 회수한다 >> 데이터가 없어질 위험이 있음 
 *
 *			2) 정적변수(클래스변수, 공유변수) => 한 개의 메모리 공간만 생긴다 > 모든 클래스 공유 가능 static
 *				=> 공유변수 : 오라클
 *				- 형식) [접근지정어] static 데이터형 변수명 = 값 (값 설정 안 하면 default 값)
 *						int => 0
 *						double => 0.0
 *						boolean = > false
 *						String, 배열, 클래스 => null (주소가 저장이 안 된 상태)
 *						=> 생성시점: 컴파일러에서 자동으로 메모리에 저장이 된다
 *						=> new가 없어도 사용이 가능
 *
 * 		생성자
 * 			1) 객체가 생성될 때 호출 메소드
 * 				A a = new A()
 * 						  -- 생성자
 * 			2) 특징
 * 				= 클래스명과 동일하다
 * 				= 리턴타입이 없다
 * 					class A {
 * 						A() {}				> 생성자
 * 						void A() {}			> 일반 메소드 
 * 						A(int a) {}			> 생성자
 * 						A(int a, int b) {}	> 생성자
 * 						}
 * 				= 생성자가 없는 경우에 추가되는 생성자는 매개변수가 없는 생성자가 추가된다
 * 											   ------------------- > 기본생성자
 * 				= 멤버변수의 초기화를 시킬 때 사용한다
 * 				= 생성자는 여러 개 사용이 가능하다 (한 개의 클래스에 여러 개 가능)
 * 				= 데이터베이스 연결, 네트워크 연결, 윈도우, ...
 * 				= 자동추가 >> import java.lang.*
 * 								  ----------- 대표적인 것 : String, Math, System, ...
 * 							class A extends Object
 * 								  ----------------- > 생략되어 있음
 * 							생성자 : 기본생성자() > 생략되어 있음
 * 							return : void
 * 			3) 역할
 * 				= 필요시마다 사용한다 (생략 가능) >> 컴파일러에 의해 자동으로 추가 
 * 				= 시작과 동시에 처리
 * 					ex) 자동 로그인, 오라클 연결, 서버 연결, ...
 * 				= 멤버변수의 초기화
 * 					class A {
 * 						int a;
 * 						A() {
 * 							init()		// 파일 읽기, 크롤링, ...
 * 											= 구현해서 초기화 
 * 						}
 * 					}
 * 
 * 					class A {
 * 						int a = 10;
 * 					}
 * 
 * 
 * 
 * 
 * 		메소드
 * 			1) 역할 => 다른 클래스와 통신
 * 			2) 수정, 추가 => 오버라이딩, 오버로딩
 * 			3) 반복제거
 * 			4) 구조적인 프로그램을 짤 때 (단락을 나눠서 처리) => 오류, 수정
 * 			5) 메소드는 호출시마다 처음부터끝까지 사용
 * 			6) 구성요소
 * 				결과값(리턴타입)
 * 					=> 리턴 타입으로 사용
 * 						- 기본형 (자바에서 지원)
 * 							int double char boolean long ....
 * 						- 배열 : 같은 데이터형 여러 개일 때
 * 							int[] double[] ...
 * 						- 클래스 : 다른 데이터형 여러 개일 때
 * 							String 사용자정의데이터형
 * 							=> 클래스도 배열 이용할 수 있다 (데이터형)
 * 							=> 자바에서 지원하지 않는 것은 : 프로그래머가 만들어서 처리 > 클래스
 * 							=> 클래스의 첫번째 기능 : 사용자 정의 데이터형
 * 									- 형변환, 대입, 연산처리,... 다 가능 (기본형과 동일하게 사용이 가능)
 * 							
 * 				메소드명 : 식별자 따라간다 => 변수, 클래스, 인터페이스, 메소드
 * 									= 변수, 메소드는 소문자
 * 									= 클래스, 인터페이스는 대문자
 * 									= 문자길이는 상관없다 (3~10) => 7
 * 									= 파악할 수 있는 이름으로 설정해야 함
 * 				매개변수(사용자 요청값)
 * 					*** 사용자의 요청값을 받아서 요청 처리 결과값을 도출
 * 					*** 최소화 시킨다 (3개 이상이면 >> 배열 or 클래스)
 * 						ex) 정수 10개를 보내주고 정렬 후 달라
 * 							(int a, int b, int c,...)
 * 							(int[] arr)					>> 배열이 더 간편 (같으 데이터형만)
 * 
 * 							(String id, String pwd, int age, ...) : 데이터형 다를 경우
 * 							(Member m)					>> 클래스가 더 간편
 * 
 * 				메소드 유형
 * 			 	- 리턴형 : 없거나 한 개만 존재			(배열, 클래스는 한 개 : 데이터는 여러 개지만 하나의 묶음)
 * 				- 매개변수 : 없거나 한 개 이상이 존대
 * 
 * 					리턴형		매개변수
 * 					  O			  O
 * 					  O			  X
 * 					  X			  O
 * 					  X			  X		
 * 
 * 				메소드 형식
 * 					[접근지정어] [옵션] 리턴타입 메소드명(매개변수... : 필요할 때만) {
 * 							   
 * 							옵션 : static, abstract, final
 * 							리턴타입 : 결과값
 * 							매개변수 : 요청값
 * 							return 값; : void일 경우에는 생략이 가능
 * 					}
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 */
public class 생성자_1 {

	public static void main(String[] args) {
		
		생성자_1 a = new 생성자_1();

	}

}
