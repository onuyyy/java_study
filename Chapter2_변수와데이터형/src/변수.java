
/*
 * 1장 자바의 특징
 * 	1. 특징
 * 		운영체제의 독립적 (모든 운영체제의 호환성이 좋다)
 * 		ex) 윈도우에서 작성한 다음에 리눅스에서 실행 가능
 * 
 * 		 - C/C++  > 소스 작성 > compile (컴퓨터가 인식하는 언어로 변경)
 * 		확장자는 'obj' : 운영체제마다 다르다
 * 
 * 		 - JAVA > 소스 작성 > compile 
 * 		확장자는 'class' : 운영체제마다 동일하다
 * 		 - 자바 실행 과정
 * 			name.java > compile(javac) > name.class > 실행 화면 출력
 * 										바이트(2진파일)		인터프리터(java)
 * 			두 번의 검증을 거치기때문에 보안이 뛰어나다
 * 
 * 		(*중요) - 객체지향 프로그램 (재사용 편리한 상태) > 유지보수가 좋다 (대규모 프로그램에 어울림)
 * 			1) 재사용 : 수정, 추가, 데이터 보호(캡슐화)
 * 							오버로딩, 오버라이딩
 * 
 * 			2) 포함 (수정할 내용이 없을 때) > has-a
 * 			   상속 (수정할 내용이 있을 때) > is-a
 * 			3) 비교적 배우기 쉽다
 * 				c/c++에서 파생 > 포인터(메모리 주소), 구조체, 다중 상속, 지원하는 API가 미약
 * 				자바언어는 이를 보완하기 위하여 강력한 API를 가지고 있음 (필요한 기능이 이미 제작)
 * 				자바언어는 조립식이다 이미 만들어진 것을 활용
 * 				(자바 공부는 직접 구현해야 함)
 * 			4) 자동 메모리 관리 (가비지 컬렉션)
 * 			네트워크 / 분산 / 멀티쓰레드 기능을 가지고 있음
 * 			
 *  2. 주의점
 *  	1) 주석 : // /*  번역 안 됨
 *  	2) 프로그램은 명령어(JVM) > 마무리는 세미콜론 ;
 *  	3) 대소문자 구분 
 *  	4) 블럭 사용법 {}
 *  	5) 들여쓰기 
 *  
 *    -구성요소
 *  	1) 클래스명 : 첫자는 대문자
 *  	2) 변수 : 소문자 시작
 *  	3) 상수 : 전체가 대문자
 *  	4) 메소드 : 소문자 시작
 *  	5) 생성자 : 클래스명과 동일
 *  
 *  공부
 *   - 데이터 저장 방법 : 변수 / 상수 
 *   				메모리 저장 > 메모리 크기 결정 > 기본형(데이터형)
 *   				사용자 정의 : 참조형 (배열, 클래스)
 *   - 데이터 가공
 *   	연산자 / 제어문
 *   	
 *   - 관련된 데이터를 모아서 관리 : 배열
 *   - 관련된 명령어를 모아서 관리 : 메소드
 *   - 데이터와 명령어를 동시에 관리 : 클래스
 *   - 객체지향 프로그램
 *   - 프로그램의 비정상 종료를 방지하거나, 오류를 처리 = 예외 머칠
 *   - 자바에서 지원하는 라이브러리
 *   
 *   3. 자바의 구성
 *   	package : 한 번만 사용 > 어느 폴더에 들어가있는지 위치 확인
 *   	import : 기존에 만들어진 class를 불러올 때 (여러 개)
 *   	
 *   	class ClassName {
 *   		변수 설정
 *   		생성자
 *   		메소드
 *   		public static void main (String[] arg) > 프로그램의 시작점 {
 *   			기본 문법
 *   		}
 *   	}
 *   
 *   	- 기본형식을 익히고 활용하고의 반복하며 공부해야 함 
 *   
 *   	변수
 *   	한 개의 데이터를 저장하는 메모리 공간, 메모리 공간의 별칭
 *   	사용법 : 데이터형 변수명 = 값;
 *   	변수명 식별자 : 변수 > 같은 이름을 사용할 수 없다
 *   		1) 알파벳이나 한글로 시작해야 함 (알파벳은 대소문자를 구분한다)
 *   			a / A 는 다른 변수
 *   		2) 숫자를 사용이 가능하다 (단, 앞에 사용 금지)
 *   			ex) 2a 불가
 *   		3) 특수문자 사용이 가능 ( 언더바_ 와 달러$ 만)
 *   			언더바 _ : 임시변수를 만들 때, 단어가 2개인 경우
 *   			ex) file_name, fileName
 *   		4) 키워드는 사용할 수 없다
 *   			자바에서 사용하는 단어를 키워드라고 한다 
 *   			> 빨간색으로 표시가 된다 
 *   		5) 길이는 제한이 없다 > (3~7)
 *   			변수는 의미가 있어야 한다 : 뭘 저장하는 변수인지 알고 있어야 하니까
 *   			ex) id, name, address, ...
 *   		
 *   		저장시에는 반드시 앞에 메모리 크기를 지정해야 한다
 *   		1)기본형 (자바에서 지원)
 *   			-정수 저장 방법
 *   				1byte		byte		네트워크 전송, 파일 읽기
 *   				2byte		short		C언어와 호환
 *   				4byte		int			평상시에 사용하는 모든 정수(default)
 *   				8byte		long		뒤에 L을 붙여야 함, long a = 1000000000L;
 *   			-실수 저장 방법
 *   				4byte		float		소수점 6자리 저장 가능, 뒤에 F를 붙여야 함 ex) float a = 10.5F;
 *   				8byte		double		소수점 15자리 저장 가능, 평상시에 사용하는 모든 실수(default)
 *   			-문자 저장 방법
 *   				2byte > char
 *   				1byte > single byte > ASC라고 한다 / 2byte (멀티바이트 > Unicode)
 *   					한글이나 중국, 독일, 일본, .. 한글자당 바이트가 2byte
 *   				byte > bit(8) =256문자
 *   				2byte > bit(16) > 65535문자 사용이 가능
 *   			-논리 저장 방법
 *   				true와 false만 저장 가능 (boolean) > 1byte 
 *   			-자동 지정 (jdk 10이상)			
 *   				var / ex) var a = 10;, var b =10.5;, var c='a'; 데이터형 없이도 데이터를 인식할 수 있음
 *   
 *   			저장이 가능한 데이터
 *   				1) 1byte (8 bit) > -128~127 
 *   			128  64  32  16   8   4   2   1(0) 
 *   		=======================================	
 *   			l 0 l 1 l 1 l 1 l 1 l 1 l 1 l 1 l
 *   		=======================================
 *   			64+32+16+8+4+2+1+ = 127
 *   			부호비트 ( 0 : 양수, 1 : 음수)
 *   				3) 2byte > -32768~3767			(short)
 *   				4) 4byte > -21억 4천 ~ 21억 4천	(int)
 *   				5) 8byte > 경 단위				(long)
 *   
 *   		저장공간은 번수, 값이 리터럴이라고 한다
 *   		*변수
 *   		데이터형 변수명 = 값;
 *   			값을 부여할 때는 크기에 맞게 지정한다
 *   			
 *   			오류 ex) int a = 10.5 
 *   					4byte   8byte > 데이터형이 크기가 더 작음
 *   
 *   		*데이터형 크기
 *   			byte < short < int < long(L) < float(F) < double (D 생략 가능)
 *   				   char
 *   			-실수가 정수보다 크기가 크다
 *   
 *   		2)참조형 (사용자 정의) > 배열, 클래스
 *   		
 *   
 *   	
 *  
 */									
 

public class 변수 {

	public static void main(String[] args) {

		System.out.println((int)'A');
		System.out.println((int)'홍');  // 문자마다 번호가 지정되어있다 > ASC
		System.out.println((int)'2');
		
		long a = 100000000000000000L;
		System.out.println(a);
		
		long b = (long)10.5;	// long 데이터 타입으로 바꾼 것
		System.out.println(b);
		
		int q = 123456;
		double w = 123456.78;
		int e = (int)(w-q)*100;
		
		System.out.println(e);
		
		byte byteValue = 127;	// -128~127;
		// 127이라는 값을 byteValue라는 공간 안에 첨부해라 , 오른쪽에서 왼쪽으로 이동
		short shortValue = 32767;	// -32768~32767;
		int intValue = 214000000;	// 
		long longValue = 9999999999999999L; // long 데이터타입은 숫자 뒤에 L 꼭 붙여줘야함
		
		// 모든 숫자는 int 인식
		// int와 long의 구분은 L자의 유무이고, 나머지는 구분하지 않는다
		
		char charValue = '쾅';
		System.out.println(charValue);
		
		float floatValue = 10.5F;
		double doubleValue = 10.5; // double형은 뒤에 d자 생략 가능
		
		System.out.println(floatValue);
		System.out.println(doubleValue);
		
		boolean booleanValue = false;
		System.out.println(booleanValue);
		
		// 모든 정수는 int를 인식하고 모든 실수는 double을 인식
		// 지역변수는 반드시 초기값을 부여한 후에 사용이 가능하다
		
		/*
		 * 변수
		 * 멤버변수
		 * 공유변수
		 * ---------프로그램 종료시까지 메모리 유지 > 자동 초기화
		 * 			
		 * 지역변수
		 * 
		 * ---------블록이 종료되면 사라지는 변수 > 직접 초기화
		 * 
		 * 
		 * class A {
		 * 		멤버변수, 공유변수
		 * 		public static void main )String[] arg) {
		 * 		}
		 * 			지역변수 : main(){} 안에서만 사용 가능 > 반드시 초기화를 시켜줘야 한다
		 * 			}
		 * 
		 * 	-변수는 변경이 가능하다
		 * 	-상수는 변경이 불가능하다 (값이 고정되어 있는 것)
		 * 
		 * 	-변수 : 데이터형 변수명 = 값;  int a = 10;
		 *  -상수 : 데이터형 변수명 = 값;  final int a = 10; (final이 앞에 붙어있으면 상수, 값을 변경할 수 없다)
		 *  
		 *	변수
		 *	선언 		int a;
		 *	초기화 	a = 0;
		 * 
		 * 	선언과 동시에 초기화 int a = 0;
		 * 
		 * 	int a;
		 * 	int b;
		 *  int c;
		 *  > int a,b,c; 	여러 개를 한 번에 선언 가능
		 *  
		 *  int a = 10;
		 *  int b = 20;
		 *  int c = 30;
		 *  > int a = 10, b = 20, c = 30;	여러 개 한번에 초기화 가능
		 *  > 데이터형이 같을 때만 가능
		 *  
		 *  자동지정 변수
		 *  var a = 10;		> int a = 10;
		 *  var b = 10.5;	> double b = 10.5;
		 *  var c = 'a';	> char c = 'a';
		 *  	*char는 int 와 호환
		 *  
		 *  
		 */
		
		
		int kor = 80;
		
		final int SCORE = 70; // (상수는 변수이름을 대문자로 써야 함)
		// = 대입 , == 같다, != 같지않다 
		
		int f = 10;
		int g = 20;
		int temp = f;
		
		f=g; // a= 20
		
		g=temp; // b=20;    	temp는 임시 변수
		System.out.println("f = " + f);
		System.out.println("g = " + g);
		// 값을 바꾼 것
		
		/*
		 * int a = 100;
		 * a = 200;
		 * a = 300;
		 * a = 400;
		 * a = 500;
		 * 한 번 바뀌면 값은 바뀐다 마지막 값이 값
		 */
		
		
		
		}
	
		
	}

